jump = {}
jump.name = "jump"
jump.args = "[PATH] (NAME)"
jump.desc = "Creates a jump file."
jump.full_desc = "This command will create a jumpfile which is used in other commands.\n[PATH] is the directory the jumpfile should be created in,\n and (NAME) should be the name of the jumpfile."
jump.handler_types = ["start", "shell"]
jump.run = function(object, args)

    if not args then; self.show_help; return; end if
    jumpName = "jumpfile"
    if args.len >= 2 then jumpName = args[1]
    pc = object.host_computer
    file = pc.File(args[0])
    if not file or not file.is_folder or not file.has_permission("w") then; print("Error, check if folder exists and has write perms!"); return; end if

    maker = pc.touch(args[0], jumpName+".src")
    if typeof(maker) == "string" then; print(maker); return; end if
    file = pc.File(args[0]+"/"+jumpName+".src")
    write.run(object, ["interop = get_custom_object()"+char(10), ">", file.path])
    write.run(object, ["user = ""user"""+char(10), ">>", file.path])
    write.run(object, ["pass = ""pass"""+char(10), ">>", file.path])
    write.run(object, ["if params.len >= 2 then"+char(10), ">>", file.path])
    write.run(object, ["user = params[0]"+char(10), ">>", file.path])
    write.run(object, ["pass = params[1]"+char(10), ">>", file.path])
    write.run(object, ["else if params.len == 1 then"+char(10), ">>", file.path])
    write.run(object, ["user = params[0]"+char(10), ">>", file.path])
    write.run(object, ["end if"+char(10), ">>", file.path])

    write.run(object, ["ipscan = function(ip, routers)"+char(10), ">>", file.path])
    write.run(object, ["router = get_router(ip)"+char(10), ">>", file.path])
    write.run(object, ["for localIP in router.devices_lan_ip"+char(10), ">>", file.path])
    write.run(object, ["if routers.indexOf(localIP) != null then continue"+char(10), ">>", file.path])
    write.run(object, ["print(""<color=#cccccc>""+localIP)"+char(10), ">>", file.path])
    write.run(object, ["routers.push(router.local_ip)"+char(10), ">>", file.path])
    write.run(object, ["if get_router(localIP) then ipscan(localIP, routers)"+char(10), ">>", file.path])
    write.run(object, ["end for"+char(10), ">>", file.path])
    write.run(object, ["end function"+char(10), ">>", file.path])
    
    write.run(object, ["if params.len >= 2 and pass == ""deepscan"" then"+char(10), ">>", file.path])
    write.run(object, ["ip = user"+char(10), ">>", file.path])
    write.run(object, ["if not is_valid_ip(ip) then; print(""IP ""+ip+"" not found!""); return; end if"+char(10), ">>", file.path])
    write.run(object, ["print("" "")"+char(10), ">>", file.path])
    write.run(object, ["print(""<color=#cccccc>""+get_router(ip).local_ip)"+char(10), ">>", file.path])
    write.run(object, ["ipscan(ip, [])"+char(10), ">>", file.path])
    write.run(object, ["print("" "")"+char(10), ">>", file.path])
    write.run(object, ["end if"+char(10), ">>", file.path])


    write.run(object, ["interop.gshell = get_shell(user, pass)"+char(10), ">>", file.path])
    write.run(object, ["interop.gcurrentUser = active_user"+char(10), ">>", file.path])
    write.run(object, ["interop.glib = include_lib(user)"+char(10), ">>", file.path])
    write.run(object, ["interop.gcryptTools = include_lib(user)"+char(10), ">>", file.path])

    builder = object.build(file.path, args[0], false)
    if builder.len then; print(builder); return; end if
    //file.delete
    file.set_content("")
    // object.launch(args[0]+"/"+jumpName)
    // return get_custom_object.gcurrentUser

    //output that needs to be added in another function
    // print(get_custom_object.gshell)
    // print(get_custom_object.gcurrentUser)
    // print(get_custom_object.gmetaxploit)
    // print(get_custom_object.gcryptTools)

end function

jump.show_help = function()
    show_help(self.name, self.args, self.full_desc, self.handler_types)
end function