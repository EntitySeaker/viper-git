findFile = function(fileObject, path)
    inputFolders = path.split("/")[:-1]
    inputFile = path.split("/")[-1]
    while fileObject.parent
        fileObject = fileObject.parent
    end while
    if path == "/" then return fileObject
    for inputFolder in inputFolders
        for folder in fileObject.get_folders
            if folder.name == inputFolder then
                fileObject = folder
                break
            end if
        end for
    end for
    for file in fileObject.get_folders+fileObject.get_files
        if file.name == inputFile then return file
    end for
end function

check_file = function(object, path)
    if typeof(object) == "shell" then file = object.host_computer.File(path)
    if typeof(object) == "computer" then file = object.File(path)
    if typeof(object) == "file" then file = findFile(object, path)
    return file
end function

in_netcat = function(shellObj, netcatList)
    for netcatItem in netcatList
        if netcatItem.value["IP"] == shellObj.host_computer.public_ip and netcatItem.value["localIP"] == shellObj.host_computer.local_ip and netcatItem.value["user"] == userCheck(shellObj.host_computer.File("/var")) then
            return true
        end if
    end for
    return false
end function

getNetcatConnections = function(output = true)
    line = char(10)+do_style("Gathering connections...", "logo", "static")
    if output == true then print(line)
    shells = main_session.MetaxploitLib.rshell_server()
    if typeof(shells) != "list" then; print("Error could not start listener!"); return "stop"; end if
    line = do_style(shells.len+" shell(s) connected!"+char(10), "arg")
    if output == true then print(line)
    for shellObj in shells
        if not in_netcat(shellObj, main_session.netcatList) then
            main_session.netcatList[main_session.netcatList.len] = {"IP":shellObj.host_computer.public_ip, "object":shellObj, "objectType":typeof(shellObj), "localIP":shellObj.host_computer.local_ip, "user":userCheck(shellObj.host_computer.File("/var"))}
        end if
    end for
end function

check_router = function(ip, version)
    router = get_router(ip)
    if not router then router = get_switch(ip)
    if not router then return null
    if router.kernel_version == version then return true
    print(do_style("kernel_router"+" "+router.kernel_version, "red", "static"))
    return null
end function

check_service = function(router, service, version)
    ports = router.used_ports
    if not ports then return null
    for port in ports
        libInfo = router.port_info(port)
        if libInfo == service+" "+version then return true
        print(do_style(libInfo, "red", "static"))
    end for
    return null
end function

ipscan = function(ip, routers)
    router = get_router(ip)
    for localIP in router.devices_lan_ip
        if routers.indexOf(localIP) != null then continue
        line = do_style(localIP, "text").replace("\.",do_style(".", "title"))
        print(line)
        routers.push(router.local_ip)
        if get_router(localIP) then ipscan(localIP, routers)
    end for
end function

addDefaultVars = function()
    if active_user != "root" then main_session.vars[active_user] = "/home/"+active_user
    main_session.vars["guest"] = "/home/guest"
    main_session.vars["downloads"] = "/Public/htdocs/downloads"
    main_session.vars["website"] = "www.viper.com"
    main_session.vars["viper-ip"] = "170.220.64.188"
    main_session.vars["es"] = "exploitscan"
end function

update_check = function(ip)
    if not main_session.aptclientLib then
        aptline = do_style("aptclient.so not found! Update check failed.", "red", "static")
        print(aptline)
        return
    end if

    print("Updating package lists...")
	main_session.aptclientLib.update

    if program_path == "/bin/viper" then
        pendingPackages = main_session.aptclientLib.check_upgrade("/bin/viper")
    else if program_path == "/bin/viper-dev" then
        pendingPackages = main_session.aptclientLib.check_upgrade("/bin/viper-dev")
        main_session.version = main_session.version+do_style(" <u>UNSTABLE!</u>", "red", "static")
    else
        binline = do_style("Viper not in /bin! Update check failed.", "red", "static")
        print(binline)
        return
    end if

	if pendingPackages == 1 then main_session.version = main_session.version+do_style(" <u>OUTDATED!</u>", "red", "static")
end function

add_session = function(obj_map)
    main_session.sessionList.push(obj_map)
    if main_session.sessionList.len > 100 then main_session.sessionList.remove(0)
end function
