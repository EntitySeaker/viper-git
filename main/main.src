commands = {
    "help":help, "clear":clear, "credits":credits, "nmap":nmap, "exploitscan":exploitscan, "exploit":exploit, "targets":targets, "use":use, "back":back, "deltarget":deltarget, "ls":ls,
    "cat":cat, "ps":ps, "corruptlogs":corruptlogs, "buffer":buffer, "nslookup":nsLookup, "whois":whoisLookup, "scanlib":scanlib, "scanlib":scanlib, "addobject":addobject, "fs":fs,
    "exec":exec, "kill":kill, "mv":mv, "cp":cp, "rm":rm, "touch":makeFile, "mkdir":mkdir, "write":write,"compile":compile, "chmod":chmodFile, "chown":chown, "chgrp":chgrp, "passwd":passwd,
    "adduser":adduser, "deluser":deluser, "groups":getGroups, "addgroup":addgroup, "delgroup":delgroup, "get":shellGet, "put":shellPut, "sniffer":sniff, "secure":secure, "wipe":wipe,
    "addvar":addvar, "delvar":delvar, "vars":vars, "gpg":gpg, "md5":md5_hash, "sha256":sha256, "airmon":airmonitor,"iwlist":iwlist, "aireplay":airkick, "aircrack":crack_cap, "shell":shell,
    "loop":loop, "ssh":ssh, "sudo":sudo, "jump":jump, "msfvenom":msfvenom, "msfconsole":msfconsole, "grab":grab, "findlib":findlib, "deepscan":deepscan, "apt-get":aptget, "libs":libs,
    "uselib":uselib, "getlib":getlib, "dellib":dellib, "crack":crack, "getviper":getviper, "exit":do_exit, "save-settings":saveSettings, "load-theme":load_theme, "return":returnStart,
    "echo":echo,
}

main_session = {
    "exit":false,
    "version":"2.2.1",
    "MetaxploitLib":null,
    "MetaxploitLibPublicIP":null,
    "MetaxploitLibLocalIP":null,
    "MetaxploitLibVersion":null,
    "cryptoLib":null,
    "cryptoLibPublicIP":null,
    "cryptoLibLocalIP":null,
    "cryptoLibVersion":null,
    "aptclientLib":null,
    "aptclientLibPublicIP":null,
    "aptclientLibLocalIP":null,
    "aptclientLibVersion":null,
    "object":get_shell,
    "handlerType":"start",
    "pub_ip":get_shell.host_computer.public_ip,
    "loc_ip":get_shell.host_computer.local_ip,
    "current_user":active_user,
    "commandBuffer":[],
    "objectList":{},
    "netcatList":{},
    "libList":{},
    "sessionList":[],
    "vars":{},
}

user_session = {
    "theme":{
        "title":"#e60000",   // red
        "text":"#404040",    // dark-grey
        "arg":"#00ff00",     // green
        "bool":"#00ace6",    // light-blue
        "outline":"#404040", // dark-grey
        "start_color":"#e60000",
        "handler_color":"#00ff00",
    },
    "static":{
        "logo":"#cccccc",    // grey
        "credits":"#ffffff", // white
        "red":"#e60000",
        "green":"#00ff00",
        "dark_grey":"#404040",
        "yellow":"#e6e600",
        "blue":"#000099",
        "light_blue":"#00ace6",
    },
}

if params.indexOf("-a") != null or params.indexOf("--anonymous") != null then main_session.pub_ip = "HIDDEN"
import_libs()
update_check()
addDefaultVars()
if params.indexOf("--no-settings") == null and params.indexOf("-ns") == null then loadSettings()
import_code("/home/volk/viper.img")
ascii_print()

injectionFlag = "Congrats, you were able to inject Viper! Your flag code is: ^E%aW$%k#5UX=1ay3r8Eu=V87$n$+rDF"

command_logic = function(input)
    if main_session.vars.hasIndex(input[0]) then
        input = main_session.vars[input[0]].split(" ")+input[1:]
    end if

    command = input[0].lower
    rawArgs = input[1:]

    args = []
    for arg in rawArgs
        if arg != "" then args.push(arg)
    end for

    if input.len < 2 then args = false

    if command == "" then
        return
    else if not commands.hasIndex(command) then
        print("Command "+command+" not found, type ""help"" for help. ")
        return
    else if commands[command].handler_types.indexOf(main_session.handlerType) == null then
        txt = do_style("You can't use the command "+command+" in this handler!", "red", "static")
        print(char(10)+txt)
        commands[command].show_help()
        return
    end if

    index=0
    noVarCommands = ["vars", "addvar", "delvar"]
    for argument in args
        var = argument
        arg = ""
        if argument.split("\+").len > 1 then
            var = argument.split("\+")[0]
            arg = argument.split("\+")[1]
        end if
        if main_session.vars.hasIndex(var) and noVarCommands.indexOf(command) == null then args[index] = main_session.vars[var]+arg
        index = index+1
    end for

    blacklist = ["buffer", "back", "targets", "clear"]
    if blacklist.indexOf(command) == null then addToBuffer(command, args)
    commands[command].run(main_session.object, args)
end function

while not main_session.exit
    
    input = user_input(TTY(main_session.object, main_session.handlerType, main_session.pub_ip, main_session.loc_ip, main_session.current_user)).split(" ")
    
    command = input[0]
    
    args = input[1:]
    
    if command.split("@").len >= 2 then
        
        macro_file = get_shell.host_computer.File(home_dir+"/Config/Macros/"+command.split("@")[1])
        
        if active_user == "root" then macro_file = get_shell.host_computer.File("/root/Config/Macros/"+command.split("@")[1])

        if not macro_file then; print("Macro not found!"); continue; end if
        
        print("Macro detected...")
        
        for macro in macro_file.get_content.split(char(10))
        
            input = macro.split(" ")
        
            command_logic(input)

        end for
        
        print("Macro finished!")

        continue
        
    end if

    command_logic(input)

end while
